Network Working Group                              M. Emilie and M. Lisa
Request For Comments: XXXX                                         ESIPE
STD: XX                                                       April 2020
Obsoletes: None


                    THE CHATHACK PROTOCOL (REVISION 1)
                     
Status of this Memo
    
    This RFC specifies a message and file exchange service protocol for 
    the project of Network Programming course in ESIPE and requests
    discussion and suggestions for improvements. Distribution of this memo
    is limited.
    
Summary

    ChatHack is a protocol used to transfer messages to a group of clients
    and privately and to transfer files and messages between two clients, who 
    will need to authenticate to use the service. The group exchange will be 
    done through a server, while private exchanges will be done directly between
    clients via TCP connection.

Acknowlegements

    The protocol was originally designed by Carayol Arnaud and Duris Etienne
    as part of the Network Programming course.

1. Purpose

    ChatHack is a protocol to transfer files and messages. It is implemented
    on top of the Internet Transmission Control Protocol (TCP or socket). [1]
    It is used to exchange messages and files between several clients. It is
    designed to be small and easy to implement, therefore it lacks most of the
    features of the secured authentification system we can find on usual chat
    services.
    
    Two modes of transfer are supported: a client-server-client TCP connexion,
    where multiple clients may exchange simple messages (using UTF-8 encoding)
    and a client-client TCP connexion, where two clients may exchange messages
    (using UTF-8 encoding) and files between them, after asking for a direct 
    connexion through the server.


Marti and Mechouk                                                   [Page 1]

RFC 1622                    PROTOCOL Revision 1                   April 2020

2. Overview of the Protocol
    
    Any transfer begins with a request to connect to a server. This server will
    ask for a login and a password to authenticate the client. If the client
    is not recognised by the server, he will be signed up. The login has to be
    unique for each client. If the server grants the request, the connection is
    opened and the client will be able to start sending and receiving groups
    messages on the ChatHack.
    
    The client is able to receive and send a message through this connexion.
    Each packet contains a message encoded in ASCII and will be sent to the
    server. The server will then broadcast it to all connected users. The client
    will also receive all the messages sent by other clients to the server.
    
    A client A may send a request to connect to another client B in order to
    send messages and files privately. This will being with a request to the
    server. The server will ask the client B if it accepts to make the connexion
    and send the response to the client A. If the response is positive, a TCP-
    based connexion will open between the two clients and they will be able to
    communicate between them. Client B may refuse the connection.
    
    This last connection will allow, not only to send messages, but to also send
    files.
    
    Errors cause termination of the connection. An error is signaled by an
    error packet. The server is responsible of closing the connection if there 
    are too many corrupted packets or exceeded timeouts coming from a client.
    
    This protocol is very restrictive, in order to simplify implementation.

Marti and Mechouk                                                   [Page 2]

RFC 1350                    PROTOCOL Revision 1                   April 2020

3. Relation to other Protocols

    ChatHack is designed to be implemented on top of the Tranmission Control
    protocol (TCP). Since socket is implemented on the Internet protocol,
    packets will have an Internet header, a Control header, and a ChatHack
    header. ----

Marti and Mechouk                                                   [Page 3]

RFC 1622                    PROTOCOL Revision 1                   April 2020


         -----------------------------------------------------
         |  Local Medium  |  Internet  |  Datagram  |  TFTP  |
         -----------------------------------------------------

                      Figure 3-1: Order of Headers


4. Initial Connection Protocol

    An initial connection is established by sending a request to the server and
    receiving a positive reply, which will come with a request for login with or
    without password. Users that have already given an alias and password should
    be known by the server so that their alias cannot be taken or used without
    its associated password, that is to say, giving an alias and a password for
    the first time means that the user is signed up to the ChatHack.
    
    Users that are only logged in without giving a password can choose an alias 
    that is not already taken by an already signed up / logged in user.
    
    As an example, the following steps show how a client can connect to the
    global chat via ChatHack protocol :
    
        1. Client A wants to connect and sends a connexion request to the
        server.
        
        2. The server acknowledges the connexion request and sends a login
        request to the Client A.
        
        3. Client A acknowledges the login request and sends a login with or
        without an associated password.
        
        4. Server acknowledges the login with or without password.
        
    The following steps show how a client can connect to another client in order
    to exchange messages privately :
    
        1. Client A sends a private connexion request to Client B through the
        server.
        
        2. The server acknowledges the private connexion request and sends a
        request to Client B.
        
        3. Client B acknowledges the connexion request to the server.
        
        4. The server sends the information of Client B to Client A in order to
        allow the connexion between the two of them.
        
        5. Client A sends a connexion request to Client B.
        
        6. Client B acknowledges the connexion request.
         
5. ChatHack Protocol Packets

    ChatHack protocol supports four types of packets, all of which have been
    mentioned above [... TODO]:
    
        Opcode      Operation
        00 - 09     Connexion request(CRQ)
        10 - 19     Acknoledgement (ACK)
        20 - 29     Message / file (DATA)
        30 - 39     Error (ERROR)
        
    The list of packets described below are the following :
        
        Name of packet                      Direction
        Request for login                   server->client
        Request for login and password      server->client
        Login                               client->server
        Login with Password                 client->server
        Group message                       client->server
        Group message broadcast             server->client
        Request for private connection      clientA->server
        Request for private connection      server->clientB
        Response for private connection     clientB->server
        Response for private connection     server->clientA
        Private message/file                clientA->clientB
        
    The ChatHack protocol header of a packet contains the opcode associated with
    the packet.
    
5.1. ChatHack Request for Connexion Packets

5.1.1. ChatHack Login Packets
    
                       int        long      String  
                    --------------------------------
                    | Opcode | SizeOfLogin | Login |
                    --------------------------------
                        Figure 5-? : Login packet
                        
    Simple login packets have the format shown in Figure 5-?. The opcode
    associated to this type of login is 00. The login, corresponding to the
    alias chosen by the client, must be encoded in ASCII in order to allow only
    a limited set of characters in the alias.
    
              int        long       String        long        String
           ------------------------------------------------------------
           | Opcode | SizeOfLogin | Login | SizeOfPassword | Password |
           ------------------------------------------------------------
                     Figure 5-? : Login with password packet
    
    Login with password packets have the format shown in Figure 5-?. The opcode
    associated to this type of login is 01. The login and password are encoded
    in ASCII in order to allow a limited set of characters in them.
    
    The Login packets are used as Request for Connection to the server.
                     
5.3. ChatHack Acknowledgment Packets
              int      long      String        long       String
           ------------------------------------------------------------
           | Opcode | SizeOfLogin | Login | SizeOfPassword | Password |
           ------------------------------------------------------------
                     Figure 5-2 : Login with password packet

5.4. ChatHack Data Packets

5.5. ChatHack Error Packets
                   int         long          String
                --------------------------------------
                | Opcode | SizeOfErrorMsg | ErrorMsg |
                --------------------------------------
                     Figure 5-? : ERROR packet
                     
    An ERROR packet (opcodes [40-49]) has the form described in Figure 5-?. An
    ERROR packet can be the aknowledgment of any other type of packet. The opcode
    is an integer indicating the nature of the error. The error message is used
    for human understanding and should be in ASCII.
    
    The return codes for the errors mean the following :
        30. Timeout
        31. Login Error
        32. Login with Password Error
        33. Invalid / Corrupted Packet
        34. Invalid File Encoding Error
    
       
6. Normal Termination

7. Premature Termination


Marti and Mechouk                                                   [Page 8]

RFC 1622                    PROTOCOL Revision 1                   April 2020

FORMAT DE NOTRE PROTOCOL


Marti and Mechouk                                                   [Page 9]

RFC 1622                    PROTOCOL Revision 1                   April 2020

Error Codes

   Value     Meaning

   0         Not defined, see error message (if any).
   1         File not found.
   2         Access violation.
   3         Disk full or allocation exceeded.
   4         Illegal TFTP operation.
   5         Unknown transfer ID.
   6         File already exists.
   7         No such user.
   
   

Marti and Mechouk                                                  [Page 10]

RFC 1622                    PROTOCOL Revision 1                   April 2020


References

    [1] Postel, J., "Transmission Control Protocol", RFC 793, USC/Information
    Sciences Institute, September 1981.


Security Considerations


Author's Address
