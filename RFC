 Network Working Group                              M. Emilie and M. Lisa
Request For Comments: XXXX                                         ESIPE
STD: XX                                                       April 2020
Obsoletes: None


                    THE CHATHACK PROTOCOL (REVISION 1)
                     
Status of this Memo
    
    This RFC specifies a message and file exchange service protocol for 
    the project of Network Programming course in ESIPE and requests
    discussion and suggestions for improvements. Distribution of this memo
    is limited.
    
Summary

    ChatHack is a protocol used to transfer messages to a group of clients
    and privately and to transfer files and messages between two clients, who 
    will need to authenticate to use the service. The group exchange will be 
    done through a server, while private exchanges will be done directly between
    clients via TCP connection.

Acknowlegements

    The protocol was originally designed by Carayol Arnaud and Duris Etienne
    as part of the Network Programming course.

1. Purpose

    ChatHack is a protocol to transfer files and messages. It is implemented
    on top of the Internet Transmission Control Protocol (TCP or socket). [1]
    It is used to exchange messages and files between several clients. It is
    designed to be small and easy to implement, therefore it lacks most of the
    features of the secured authentification system we can find on usual chat
    services.
    
    Two modes of transfer are supported: a client-server-client TCP connexion,
    where multiple clients may exchange simple messages (using ASCII encoding)
    and a client-client TCP connexion, where two clients may exchange messages
    (using ASCII encoding) and files between them, after asking for a direct 
    connexion through the server.


Marti and Mechouk                                                   [Page 1]

RFC 1622                    PROTOCOL Revision 1                   April 2020

2. Overview of the Protocol
    
    Any transfer begins with a request to connect to a server. This server will
    ask for a login and a password to authenticate the client. If the client
    is not recognised by the server, he will be signed up. The login has to be
    unique for each client. If the server grants the request, the connection is
    opened and the client will be able to start sending and receiving groups
    messages on the ChatHack.
    
    The client is able to receive and send a message through this connexion.
    Each packet contains a message encoded in ASCII and will be sent in packets
    of fixed size **[?? Ã  revoir ??]** to the server. The server will then
    broadcast it to all connected users. The client will also receive all the 
    messages sent by other clients to the server.
    
    A client A may send a request to connect to another client B in order to
    send messages and files privately. This will being with a request to the
    server. The server will ask the client B if it accepts to make the connexion
    and send the response to the client A. If the response is positive, a TCP-
    based connexion will open between the two clients and they will be able to
    communicate between them. Client B may refuse the connection.
    
    This last connection will allow, not only to send messages, but to also send
    files.
    
    Errors cause termination of the connection. An error is signaled by an
    error packet. The server is responsible of closing the connection if there 
    are too many corrupted packets or exceeded timeouts coming from a client.
    
    This protocol is very restrictive, in order to simplify implementation.
    
    [ TODO :
        - Fixed lenght packet
        - Types of packet
            - Request for connection (client->server)
            - Request for login (server->client)
            - Request for login and password (server->client)
            - Login (client->server)
            - Password (client->server)
            - Group message (server->client)
            - Group message broadcast (server->client)
            - Request for private connection (clientA->server)
            - Request for private connection (server->clientB)
            - Response for private connection (clientB->server)
            - Response for private connection (server->clientA)
            - Private message/file (clientA->clientB)
        ----------------------------------------------------
        |  Size  |  type:msg/file   |  Metadata  |  Bytes  |
        ----------------------------------------------------
    ]

Marti and Mechouk                                                   [Page 2]

RFC 1350                    PROTOCOL Revision 1                   April 2020

3. Relation to other Protocols

    ChatHack is designed to be implemented on top of the Tranmission Control
    protocol (TCP). Since socket is implemented on the Internet protocol,
    packets will have an Internet header, a Control header, and a ChatHack
    header. ----

Marti and Mechouk                                                   [Page 3]

RFC 1622                    PROTOCOL Revision 1                   April 2020


         -----------------------------------------------------
         |  Local Medium  |  Internet  |  Datagram  |  TFTP  |
         -----------------------------------------------------

                      Figure 3-1: Order of Headers


4. Initial Connection Protocol


Sollins                                                         [Page 4]

RFC 1350                    PROTOCOL Revision 1                   April 2020

    
     1. Host A sends  a  "WRQ"  to  host  B  with  source=  A's  TID,
         destination= 69.

     2. Host  B  sends  a "ACK" (with block number= 0) to host A with
         source= B's TID, destination= A's TID.
         
5. TFTP Packets

Sollins                                                         [Page 5]

RFC 1350                    PROTOCOL Revision 1                   April 2020


            2 bytes     string    1 byte     string   1 byte
            ------------------------------------------------
           | Opcode |  Filename  |   0  |    Mode    |   0  |
            ------------------------------------------------

                       Figure 5-1: RRQ/WRQ packet
                       
Sollins                                                         [Page 6]

RFC 1350                    TFTP Revision 1                   April 2020


2 bytes     2 bytes      n bytes
                   ----------------------------------
                  | Opcode |   Block #  |   Data     |
                   ----------------------------------

                        Figure 5-2: DATA packet
                        
Sollins                                                         [Page 7]

RFC 1350                    TFTP Revision 2                   April 2020


               2 bytes     2 bytes      string    1 byte
               -----------------------------------------
              | Opcode |  ErrorCode |   ErrMsg   |   0  |
               -----------------------------------------

                        Figure 5-4: ERROR packet
                        
6. Normal Termination

7. Premature Termination


Sollins                                                         [Page 8]

RFC 1350                    TFTP Revision 1                   April 2020

FORMAT DE NOTRE PROTOCOL


Sollins                                                         [Page 9]

RFC 1350                    TFTP Revision 1                   April 2020

Error Codes

   Value     Meaning

   0         Not defined, see error message (if any).
   1         File not found.
   2         Access violation.
   3         Disk full or allocation exceeded.
   4         Illegal TFTP operation.
   5         Unknown transfer ID.
   6         File already exists.
   7         No such user.
   
   

Sollins                                                        [Page 10]

RFC 1350                    TFTP Revision 1                   April 2020


References

    [1] Postel, J., "Transmission Control Protocol", RFC 793, USC/Information
    Sciences Institute, September 1981.


Security Considerations


Author's Address
